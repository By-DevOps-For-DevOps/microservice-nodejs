AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Tag:
    Type: String
    Description: Tag of the Docker Image.
    Default: TAG
  EnvironmentName:
    Type: String
    Description: Name of the Environment.
    Default: ENVIRONMENT_NAME

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      #The Family name will be used along with ECS_CLUSTER_NAME to prepare the stack name. It should be of Format abb-cdd-sd
      Family: NodeServer-BUILD_SCOPE
      ContainerDefinitions:
      - Name: NodeJs
        Cpu: '10'
        Essential: 'true'
        Image:
          "Fn::Sub":
            - '${AccountId}.dkr.ecr.${Region}.amazonaws.com/NodeServer:TAG'
            - { AccountId: { "Ref" : "AWS::AccountId" }, Region: { "Ref" : "AWS::Region" }}
        Memory: '128'
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: NodeServer-ALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-PublicSubnet1"
        - Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-PublicSubnet2"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ECSTG
      LoadBalancerArn:
        Ref: ALB
      Port: '80'
      Protocol: HTTP
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ECSTG
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn:
        Ref: ALBListener
      Priority: 1
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
           Fn::Sub:  "${EnvironmentName}-VPC"
  ECSServicePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ecs-service"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['*']
            Resource: '*'
      Roles:
      - Ref: ECSServiceRole
  Service:
    Type: AWS::ECS::Service
    DependsOn: ECSServicePolicy
    Properties:
      Cluster:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-ECSCluster"
      DesiredCount: '1'
      TaskDefinition:
        Ref: TaskDefinition
      LoadBalancers:
      - ContainerName: NodeServer
        ContainerPort: '80'
        TargetGroupArn:
          Ref: ECSTG
      Role:
        Ref: ECSServiceRole
Outputs:
  ecsservice:
    Value:
      Ref: Service