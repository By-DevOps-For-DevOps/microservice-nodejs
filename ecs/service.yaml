AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Tag:
    Type: String
    Description: Tag of the Docker Image.
    Default: TAG
  EnvironmentName:
    Type: String
    Description: Name of the Environment.
    Default: ENVIRONMENT_NAME
  ServiceMaxCapacity:
    Description: 'The maximum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 4
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  ServiceMinCapacity:
    Description: 'The minimum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  Email:
    Type: String
    Description: Email address to notify when an API activity has triggered an alarm
    Default: EMAIL
  ECSRespositoryName:
    Type: String
    Description: 'ECS Repository Name'
    Default: ECS_REPOSITORY_NAME

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      #The Family name will be used along with ECS_CLUSTER_NAME to prepare the stack name. It should be of Format abb-cdd-sd
      Family: Nodejs-BUILD_SCOPE
      ContainerDefinitions:
      - Name: nodejs-app
        Cpu: '64'
        Essential: 'true'
        Image:
          "Fn::Sub":
            - '${AccountId}.dkr.ecr.${Region}.amazonaws.com/${ECSRespositoryName}:TAG'
            - { AccountId: { "Ref" : "AWS::AccountId" }, Region: { "Ref" : "AWS::Region" }}
        Memory: '128'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: CloudwatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: nodejs-app
        PortMappings:
        - ContainerPort: 9000
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId:
        Fn::ImportValue:
           Fn::Sub:  "${EnvironmentName}-VPC"
      SecurityGroupIngress:
        # Only allow inbound access to ECS from the same VPC
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "ECSLogGroup-${AWS::StackName}"
      RetentionInDays: 14
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: 
        Fn::Sub: ${EnvironmentName}-Nodejs-ALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-PublicSubnet1"
        - Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-PublicSubnet2"
      SecurityGroups:
      - Ref: ECSSecurityGroup
      - Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-ECSHostSecurityGroup"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ECSTG
      LoadBalancerArn:
        Ref: ALB
      Port: '80'
      Protocol: HTTP
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ECSTG
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn:
        Ref: ALBListener
      Priority: 1
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
           Fn::Sub: "${EnvironmentName}-VPC"
  ECSServicePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ecs-service"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['*']
            Resource: '*'
      Roles:
      - Ref: ECSServiceRole
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSServicePolicy
      - ALB
      - ALBListener
    Properties:
      Cluster:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-ECSCluster"
      DesiredCount: '2'
      TaskDefinition:
        Ref: TaskDefinition
      LoadBalancers:
      - ContainerName: nodejs-app
        ContainerPort: '9000'
        TargetGroupArn:
          Ref: ECSTG
      Role:
        Ref: ECSServiceRole
  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref ServiceMaxCapacity
      MinCapacity: !Ref ServiceMinCapacity
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster:
            'Fn::ImportValue': !Sub '${EnvironmentName}-ECSCluster'
          Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration: 
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration: 
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -25
  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
      - !Ref ScaleUpPolicy
  CPUUtilizationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      AlarmActions:
      - !Ref ScaleDownPolicy
  MemoryUtilizationHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Service is running out of memory'
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: 
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: MemoryUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: '1' 
      Threshold: 80
      AlarmActions: [!Ref 'ScaleUpPolicy']
  MemoryUtilizationLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Service is wasting memory'
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: 
          Fn::ImportValue: !Sub '${EnvironmentName}-ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: MemoryUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1 
      Threshold: 20
      AlarmActions: [!Ref 'ScaleDownPolicy']

  # Filters all logs for the word Error
  AppErrorsLogsFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: Error
      LogGroupName:
        Ref: CloudwatchLogsGroup
      MetricTransformations:
      - MetricName: AppErrors
        MetricNamespace:
          Ref: 'AWS::StackName'
        MetricValue: 1
  AppErrorsAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application errors in logs'
      Namespace:
        Ref: 'AWS::StackName'
      MetricName: AppErrors
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Ref: AlarmNotificationTopic

  ALB500sAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ECS Nodejs - 5XX Count
      EvaluationPeriods: '1'
      Statistic: Sum
      Threshold: '500'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '300'
      AlarmActions:
      - Ref: AlarmNotificationTopic
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          "Fn::GetAtt": [ ALB, LoadBalancerFullName ]
      - Name: TargetGroup
        Value:
          "Fn::GetAtt": [ ECSTG, TargetGroupFullName ]
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_Target_5XX_Count
  HealthyHostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ECS Nodejs - Healthy Hosts
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '1'
      AlarmDescription: Alarm if the number of healthy hosts is less than or equal to 1.
      Period: '300'
      AlarmActions:
      - Ref: "AlarmNotificationTopic"
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          "Fn::GetAtt": [ ALB, LoadBalancerFullName ]
      - Name: TargetGroup
        Value:
          "Fn::GetAtt": [ ECSTG, TargetGroupFullName ]
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: HealthyHostCount
  UnhealthyHostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ECS Nodejs - Unhealthy Hosts
      EvaluationPeriods: '5'
      Statistic: Maximum
      Threshold: '1'
      AlarmDescription: Alarm if the number of unhealthy hosts is greater than or equal to 1.
      Period: '300'
      AlarmActions:
      - Ref: "AlarmNotificationTopic"
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          "Fn::GetAtt": [ ALB, LoadBalancerFullName ]
      - Name: TargetGroup
        Value:
          "Fn::GetAtt": [ ECSTG, TargetGroupFullName ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: UnHealthyHostCount
  LatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ECS Nodejs - Average Latency
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '2'
      AlarmDescription: Alarm if the average latency is greater than or equal to 2.
      Period: '300'
      AlarmActions:
      - Ref: "AlarmNotificationTopic"
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          "Fn::GetAtt": [ ALB, LoadBalancerFullName ]
      - Name: TargetGroup
        Value:
          "Fn::GetAtt": [ ECSTG, TargetGroupFullName ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: TargetResponseTime
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "EMAIL"
          Protocol: email
      TopicName: nodejs-app-topic
Outputs:
  ecsservice:
    Value:
      Ref: Service
  AppALBDNS:
    Value:
      "Fn::GetAtt": [ ALB, DNSName ]
